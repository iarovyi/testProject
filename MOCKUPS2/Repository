using System;
using System.Collections.Generic;
using System.Data.Entity;
using System.Data.Entity.Infrastructure;
using System.Linq;
using System.Linq.Expressions;
using System.Text;
using RestructuringTool.DAL;

namespace RestructuringTool.ConsoleApp
{
    public interface IRepository<T>
    {

        IQueryable<T> GetAll();
        T GetSingle(int fooId);

        //include
        IQueryable<T> FindBy(Expression<Func<T, bool>> predicate);
        void Add(T entity);
        void Delete(T entity);
        void Edit(T entity);
        void Save();
    }

    public class RestructuringProgramRepository : Repository<RestracturingProgram>
    {
        
    }

    //http://stackoverflow.com/questions/21583982/does-anyone-have-a-very-complete-example-generic-repository-for-ef-6-1

    //https://github.com/CypressNorth/.NET-EF6-GenericRepository/blob/master/BaseService.cs
    //http://www.codeproject.com/Articles/640294/Learning-MVC-Part-Generic-Repository-Pattern-in
    /// <summary>
    /// The EF-dependent, generic repository for data access
    /// </summary>
    /// <typeparam name="T">Type of entity for this Repository.</typeparam>
    public class GenericRepository<T> : IRepository<T> where T : class
    {
        public GenericRepository(DbContext dbContext)
        {
            if (dbContext == null)
                throw new ArgumentNullException("An instance of DbContext is required to use this repository", "context");
            DbContext = dbContext;
            DbSet = DbContext.Set<T>();
        }

        protected DbContext DbContext { get; set; }

        protected DbSet<T> DbSet { get; set; }

        public virtual IQueryable<T> Find(Expression<Func<T, bool>> predicate)
        {
            return DbSet.Where<T>(predicate);
        }

        public virtual IQueryable<T> GetAll()
        {
            return DbSet;
        }

        public virtual T GetById(int id)
        {
            //return DbSet.FirstOrDefault(PredicateBuilder.GetByIdPredicate<T>(id));
            return DbSet.Find(id);
        }

        public virtual void Add(T entity)
        {
            DbEntityEntry dbEntityEntry = DbContext.Entry(entity);
            if (dbEntityEntry.State != EntityState.Detached)
            {
                dbEntityEntry.State = EntityState.Added;
            }
            else
            {
                DbSet.Add(entity);
            }
        }

        public virtual void Update(T entity)
        {
            DbEntityEntry dbEntityEntry = DbContext.Entry(entity);
            if (dbEntityEntry.State == EntityState.Detached)
            {
                DbSet.Attach(entity);
            }
            dbEntityEntry.State = EntityState.Modified;
        }

        public virtual void Delete(T entity)
        {
            DbEntityEntry dbEntityEntry = DbContext.Entry(entity);
            if (dbEntityEntry.State != EntityState.Deleted)
            {
                dbEntityEntry.State = EntityState.Deleted;
            }
            else
            {
                DbSet.Attach(entity);
                DbSet.Remove(entity);
            }
        }

        public virtual void Delete(int id)
        {
            var entity = GetById(id);
            if (entity == null) return; // not found; assume already deleted.
            Delete(entity);
        }

        public virtual void AddRange(IEnumerable<T> entities)
        {
            DbContext.Set<T>().AddRange(entities);
        }

        public virtual void RemoveRange(IEnumerable<T> entities)
        {
            DbContext.Set<T>().RemoveRange(entities);
        }


        public IQueryable<T> GetAllIncluding(params Expression<Func<T, object>>[] expressions)
        {
            IQueryable<T> query = DbSet;
            foreach (var expression in expressions)
            {
                query = query.Include(expression);
            }
            return query;
        }
    }

   
    /*public abstract class Repository<T> : IRepository<T> where T : class 
    {
        protected readonly RestructuringContext Context;

        protected Repository()
        {
            Context = new RestructuringContext();
        }

        public IQueryable<T> GetAll()
        {
            return Context.Set<T>();
        }

        public T GetSingle(int fooId)
        {
            DbSet<T> set = Context.Set<T>();
            return set.Find(fooId);
        }

        public IQueryable<T> FindBy(Expression<Func<T, bool>> predicate)
        {
            return Context.Set<T>().Where(predicate);
        }

        public void Add(T entity)
        {
            Context.Set<T>().Add(entity);
        }

        public void Delete(T entity)
        {
            Context.Set<T>().Remove(entity);
        }

        //http://stackoverflow.com/questions/15336248/entity-framework-5-updating-a-record
        public void Edit(T entity)
        {
            Context.Set<T>().Attach(entity);
            Context.Entry(entity).State = EntityState.Modified;
        }

        public void Save()
        {
            Context.SaveChanges();
        }
    }*/
}
